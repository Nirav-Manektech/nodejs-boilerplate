components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    
    DefaultResponse:
      type: object
      properties:
        error:
          type: object
        data:
          type: object
        code:
          type: integer
          description: HTTP status code
        message:
          type: string
        success:
          type: boolean
      example:
        error: {}
        data: {}
        code: 200
        message: ""
        success: true
    
    UserRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
      example:
        email: "niravkhetani333@gmail.com"
        name: "Nirav Khetani"
        password: "Nirav@123"
    
  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

routes:
  - route: '/auth/register'
    method: 'post'
    summary: 'Register as user'
    tags:
      - 'Auth'
    requestBodySchema: 'UserRequest'
    responseSchemas:
      default:
        description: 'Default response'
        ref: 'DefaultResponse'

  - route: '/auth/login'
    method: 'post'
    summary: 'Login'
    tags:
      - 'Auth'
    requestBodySchema: 'User'
    responseSchemas:
      200:
        description: 'OK'
        ref: 'User'
      401:
        description: 'Invalid email or password'
        ref: 'Error'
      default:
        description: 'Default response'
        ref: 'DefaultResponse'
  - route: '/auth/logout'
    method: 'post'
    summary: 'Logout'
    tags:
      - 'Auth'
    requestBodySchema: 'User'
    responseSchemas:
      204:
        description: 'No content'
      404:
        description: 'Not found'
        ref: 'NotFound'

  - route: '/auth/refresh-tokens'
    method: 'post'
    summary: 'Refresh auth tokens'
    tags:
      - 'Auth'
    requestBodySchema: 'User'
    responseSchemas:
      200:
        description: 'OK'
        ref: 'AuthTokens'
      401:
        description: 'Unauthorized'
        ref: 'Unauthorized'

  - route: '/auth/forgot-password'
    method: 'post'
    summary: 'Forgot password'
    tags:
      - 'Auth'
    requestBodySchema: 'User'
    responseSchemas:
      204:
        description: 'No content'
      404:
        description: 'Not found'
        ref: 'NotFound'

  - route: '/auth/reset-password'
    method: 'post'
    summary: 'Reset password'
    tags:
      - 'Auth'
    parameters:
      - in: query
        name: token
        required: true
        schema:
          type: string
    requestBodySchema: 'User'
    responseSchemas:
      204:
        description: 'No content'
      401:
        description: 'Password reset failed'
        ref: 'Error'

  - route: '/auth/send-verification-email'
    method: 'post'
    summary: 'Send verification email'
    tags:
      - 'Auth'
    security:
      - bearerAuth: []
    responseSchemas:
      204:
        description: 'No content'
      401:
        description: 'Unauthorized'
        ref: 'Unauthorized'

  - route: '/auth/verify-email'
    method: 'post'
    summary: 'Verify email'
    tags:
      - 'Auth'
    parameters:
      - in: query
        name: token
        required: true
        schema:
          type: string
    responseSchemas:
      204:
        description: 'No content'
      401:
        description: 'Verify email failed'
        ref: 'Error'
